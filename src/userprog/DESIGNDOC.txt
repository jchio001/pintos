		     +--------------------------+
       	       	     |		CS 153		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Jonathan Chiou <jchio001@ucr.edu>
William Keidel <wkeid001@ucr.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

exec_helper:

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Using the sample skeleton code given to us, we use the exec_helper struct
to organize the arguments and pass them to process_execute.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok() is not implemented because it is not thread safe. strtok() stores
the location where the last token was found internally. When there's
2 threads calling strtok(), there is a possibility that one of the threads
will end up using the last token held by the other thread, which is not
correct.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

-For argument parsing, we will be using shell allocated memory versus
the kernel. If this memory runs out, something really bad won't happen
compared to if we used the kernal instead (if we're out of memory in 
the kernel, the system will probably crash).

-We are able to check the vailidity of our arguments before the kernel is
given control.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

Each open file per process has a unique fd associated with it, and each
process has its own file descriptor counter, which is incremented 
whenever a file is opened. Because the fd counter is unique to a process,
file descriptors are only unique within a process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

For both of these cases, we would need 2 calls at worst, as the byte
distribution will be split into at most 2 pages.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

When we give a process a PID, it will go through a list of child 
processes for that specific PID. If there is no child with that
PID or if the child is already waiting, we will return -1. If this
is not the case, then the current process will wait until the child
process exit (we will need some sort of identifier to say that we are
waiting a specific child process). Once the child process exists, we
will obtain it's exit status, remove the child from the parent
process's list of children, and return the exit status.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.



---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

When exec is invoked by a process, we will create a child process and 
put it into its list of children. The children will have a load
variable, and that will be set to signify that the child has not
finished loading. We will also have a sempahore to be downed to
ensure that only 1 process will be loading at a time. Once we have
completed loading this child process, we will change this load variable
to signify if we have succeeded or failed our loading. The parent process
will now be able to check the load value, and it will return -1 if the
value reflects a failure.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

We have a wait semaphore that's initialized to 0 and can only be at
most 1.

When P calls wait before C exits, it'll check the exit flag for the
child, gets added to the waiting list of the semaphore until C
changes the exit flag and ups the sempahore. Since the seamphore is
now upped, P is no longer waiting and is awake. If P were to call
wait after this point, it will not down the semaphore due to the fact
that the exit flag is true. Once a parent process has finished waiting
for a child process, the resources that must be freed (the child_process
structs in the parent's list of children) will be freed.

When P terminates before C exits, C will call thread_alive to see that 
the parent is dead, and does not to gain access to the parent's list
of children. 

When P terminates after C exits and doesn't wait, C's child process
sturct is freed. The same goes for all remaining child processes.

If we're considering the initial thread (which is parentless), our
call to thread_alive() to check the state of the parent will always
return false.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

It was the only method we were able to think of at the time; there is not
enough time and knowledge given for us to consider anything else.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

As of now, we are thinking of just leaving it alone due to the fact that
a process will only contain 1 thread. The advantage of this is that we
can leave it alone and be fine, but if we were to do this in a multi-
threaded-system, it will obviously fail. But we aren't, so everything
should be fine.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

Too hard. There was really no sense of direction enforced, so it's really
hard to find a path for working on something and then going down from
there. For a majority of the project, the thought process was "What are
we doing? Where do we go from here?".

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

As of right now, no.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

A concrete place to start needs to be established firmly and early. If
there is no sense of direction, then a good amount of people will go 
for the "too little too late" approach.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

Hints on what to do are good, but sometimes the best way to teach something
is to explicity tell someone exactly what they should do. Granted, this
approach will not work in most cases, but the Pintos projects feel like
something this approach will work on.

>> Any other comments?
I guess for these projects, they would be fine if students were able to 
fully commit as much effort as they could onto them. But unfornately,
most students take these classes in at least their junior year, which
means that most of them can't fully commit to wokring on the projects.
They have obligations to other classes and their corresponding projects,
jobs that they have to work, and jobs that they have to secure in the
future. Because of this factor, the projects feel a lot more difficult
than they actually are due to time constraints. You can tell students
to start early, but they won't until they actually know what to do,
which takes time.
